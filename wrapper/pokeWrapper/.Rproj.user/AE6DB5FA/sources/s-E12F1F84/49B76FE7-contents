library(httr)
library(tidyverse)
library(dplyr)

poke_api <- function(path){
  url <- modify_url("https://pokeapi.co", path=paste("/api/v2",path, sep=""))
  response <- GET(url)

  if (http_type(response) != "application/json"){
    stop("API did not return json", call. = FALSE)
  }
  response
}

initializeDataFrame <- function(){
  pokeList <- poke_api("/generation/1")

  pokeList <- jsonlite::fromJSON(content(pokeList, "text"), simplifyVector = FALSE)
  numPokemon <- length(pokeList$pokemon_species)
  pokeframe <- data.frame(idx = 1:numPokemon, pokemon = 1:numPokemon, speciesURL = 1:numPokemon, habitat = 1:numPokemon, captureRate = 1:numPokemon, type = 1:numPokemon, moves=1:numPokemon)
  for ( i in 1:numPokemon){
    pokeframe$pokemon[i] <- pokeList$pokemon_species[[i]]$name
    pokeframe$speciesURL[i] <- pokeList$pokemon_species[[i]]$url
    shortStr <- str_extract(substr(pokeframe$speciesURL[i],nchar(pokeframe$speciesURL[1])-4,nchar(pokeframe$speciesURL[1])), "(?<![0-9])/.*")
    pokeframe$idx[i] <- substr(shortStr,2,nchar(shortStr)-1)
    # Get species info (habitate, capture rate, base happiness)
    currSpecies <- poke_api(paste("/pokemon-species/",pokeframe$idx[i],sep=""))
    currSpecies <- jsonlite::fromJSON(content(currSpecies, "text"), simplifyVector = FALSE)
    pokeframe$habitat[i] <- currSpecies$habitat[[1]]
    pokeframe$captureRate[i] <- currSpecies$capture_rate
    # Get pokemon type
    currPokemon <- poke_api(paste("/pokemon/",pokeframe$idx[i],sep=""))
    currPokemon <- jsonlite::fromJSON(content(currPokemon, "text"), simplifyVector = FALSE)
    # Get pokemon moves
    move<-vector()
    if (length(currPokemon$moves)<5){
      end <- length(currPokemon$moves)
    } else{
      end <- 5
    }
    for (k in 1:end){
      move<-c(move,currPokemon$moves[[k]]$move$name)
      move<-paste(move,collapse=",")}
    curType <- currPokemon$types
    type <- ""
    for (j in 1:length(curType)){
      if (j==1){
        type = curType[[j]]$type$name
      } else {
        type = paste(type,", ",curType[[j]]$type$name, sep="")
      }
    }
    pokeframe$moves[i] <- move
    pokeframe$type[i] <- type
    Sys.sleep(1.5)
    cat('\r', i)
    flush.console()
  }
  pokeframe
}

pokeframe <- initializeDataFrame()

summary <- function(infoType){
  if (infoType == "habitat"){
    #count of pokemon in habitat
    group_by(pokeframe, habitat) %>% summarise(pokemonCount=n(), meanCaptureRate=round(mean(captureRate, na.rm = TRUE)))
  } else if (infoType == "type"){
    group_by(pokeframe, type) %>% summarise(pokemonCount=n(), meanCaptureRate=round(mean(captureRate, na.rm = TRUE)))
  } else{
    print("Invalid Request")
  }
}


poke.filter <- function(vec){
  subset(pokeframe, pokemon %in% vec)
}
